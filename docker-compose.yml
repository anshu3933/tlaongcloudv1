version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Core Services
  auth-service:
    build:
      context: .
      dockerfile: backend/auth_service/Dockerfile
    ports:
      - "8003:8003"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - GCP_PROJECT_ID=${GCP_PROJECT_ID}
      - GCS_BUCKET_NAME=${GCS_BUCKET_NAME}
      - GEMINI_MODEL=${GEMINI_MODEL}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_FROM_EMAIL=${SMTP_FROM_EMAIL}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  workflow-service:
    build:
      context: .
      dockerfile: backend/workflow_service/Dockerfile
    ports:
      - "8004:8004"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL}
      - SMTP_ENABLED=${SMTP_ENABLED}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - EMAIL_FROM=${SMTP_FROM_EMAIL}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth-service:
        condition: service_started

  special-education-service:
    build:
      context: .
      dockerfile: backend/special_education_service/Dockerfile
    ports:
      - "8005:8005"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL}
      - WORKFLOW_SERVICE_URL=${WORKFLOW_SERVICE_URL}
      - GCP_PROJECT_ID=${GCP_PROJECT_ID}
      - GCP_REGION=${GCP_REGION}
      - GEMINI_MODEL=${GEMINI_MODEL}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - GCS_BUCKET_NAME=${GCS_BUCKET_NAME}
      - GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_APPLICATION_CREDENTIALS}
    volumes:
      - ${GOOGLE_APPLICATION_CREDENTIALS}:${GOOGLE_APPLICATION_CREDENTIALS}:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth-service:
        condition: service_started
      workflow-service:
        condition: service_started

  assessment-pipeline-service:
    build:
      context: .
      dockerfile: backend/assessment_pipeline_service/Dockerfile
    ports:
      - "8006:8006"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL}
      - SPECIAL_ED_SERVICE_URL=${SPECIAL_ED_SERVICE_URL}
      - GCP_PROJECT_ID=${GCP_PROJECT_ID}
      - GCP_REGION=${GCP_REGION}
      - GEMINI_MODEL=${GEMINI_MODEL}
      - DOCUMENT_AI_PROJECT_ID=${DOCUMENT_AI_PROJECT_ID}
      - DOCUMENT_AI_PROCESSOR_ID=${DOCUMENT_AI_PROCESSOR_ID}
      - DOCUMENT_AI_LOCATION=${DOCUMENT_AI_LOCATION}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - GCS_BUCKET_NAME=${GCS_BUCKET_NAME}
      - GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_APPLICATION_CREDENTIALS}
    volumes:
      - ${GOOGLE_APPLICATION_CREDENTIALS}:${GOOGLE_APPLICATION_CREDENTIALS}:ro
      - uploaded_documents:/app/uploaded_documents
    depends_on:
      redis:
        condition: service_healthy
      auth-service:
        condition: service_started
      special-education-service:
        condition: service_started

  mcp-server:
    build:
      context: .
      dockerfile: backend/mcp_server/Dockerfile
    ports:
      - "${MCP_SERVER_PORT}:8001"
    environment:
      - ENVIRONMENT=development
      - REDIS_URL=${REDIS_URL}
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - GCP_PROJECT_ID=${GCP_PROJECT_ID}
      - GCP_REGION=${GCP_REGION}
      - GCS_BUCKET_NAME=${GCS_BUCKET_NAME}
      - GEMINI_MODEL=${GEMINI_MODEL}
      - GOOGLE_APPLICATION_CREDENTIALS=/app/gcp-credentials.json
    volumes:
      - ~/.config/gcloud/application_default_credentials.json:/app/gcp-credentials.json:ro
      - ./backend/mcp_server/src:/app/mcp_server/src:ro
      - ./backend/common:/app/common:ro
      - uploaded_documents:/app/uploaded_documents
    depends_on:
      redis:
        condition: service_healthy

  adk-host:
    build:
      context: .
      dockerfile: backend/adk_host/Dockerfile
    ports:
      - "${ADK_HOST_PORT}:8002"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - MCP_SERVER_URL=${MCP_SERVER_URL}
      - REDIS_URL=${REDIS_URL}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL}
      - WORKFLOW_SERVICE_URL=${WORKFLOW_SERVICE_URL}
      - SPECIAL_ED_SERVICE_URL=${SPECIAL_ED_SERVICE_URL}
      - ASSESSMENT_PIPELINE_SERVICE_URL=${ASSESSMENT_PIPELINE_SERVICE_URL}
      - GCP_PROJECT_ID=${GCP_PROJECT_ID}
      - GCP_REGION=${GCP_REGION}
      - GEMINI_MODEL=${GEMINI_MODEL}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - GCS_BUCKET_NAME=${GCS_BUCKET_NAME}
      - GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_APPLICATION_CREDENTIALS}
    volumes:
      - ${GOOGLE_APPLICATION_CREDENTIALS}:${GOOGLE_APPLICATION_CREDENTIALS}:ro
      - ./backend/adk_host/src:/app/adk_host/src:ro
      - ./backend/common:/app/common:ro
      - uploaded_documents:/app/uploaded_documents
    depends_on:
      mcp-server:
        condition: service_started
      redis:
        condition: service_healthy
      auth-service:
        condition: service_started
      workflow-service:
        condition: service_started
      special-education-service:
        condition: service_started
      assessment-pipeline-service:
        condition: service_started

volumes:
  postgres_data:
  chroma_db:
  uploaded_documents: 