"use client"

import { useState } from "react"
import { Book, Target, Layers, Users, FileText, RefreshCw, Edit3, Copy, ChevronDown, ChevronUp } from "lucide-react"
import { Button } from "@/components/ui/button"

interface LessonPreviewProps {
  data: any
  updateData: (data: any) => void
}

export function LessonPreview({ data }: LessonPreviewProps) {
  const [activeTab, setActiveTab] = useState("all")
  const [expanded, setExpanded] = useState({
    objectives: true,
    warmup: true,
    mainActivity: true,
    assessment: true,
    closure: true,
    iepConnections: true,
  })

  const toggleSection = (section: string) => {
    setExpanded({
      ...expanded,
      [section]: !expanded[section as keyof typeof expanded],
    })
  }

  // This would normally be generated by the AI
  const lessonPlan = {
    title: data.basicInfo.title || "Main Idea and Supporting Details",
    subject: data.basicInfo.subject || "Reading",
    grade: data.basicInfo.grade || "4th",
    standards: data.basicInfo.standards || "CCSS.ELA-LITERACY.RI.4.2",
    duration: data.basicInfo.duration || "45",
    objectives: {
      basic: data.objectives.basic || "Identify the main idea in a text",
      intermediate: data.objectives.intermediate || "Find supporting details that relate to the main idea",
      advanced: data.objectives.advanced || "Analyze how supporting details contribute to the main idea",
    },
    warmup: {
      all: [
        "Begin with a brief discussion about what makes a good story or informational text interesting.",
        "Show a simple picture or photograph and ask students to identify the main subject/focus and supporting details.",
        "Explain that just like pictures have a main focus, texts have main ideas supported by details.",
      ],
      basic: "Provide a simple paragraph with the main idea highlighted. Ask students to circle one supporting detail.",
      intermediate:
        "Provide a paragraph and ask students to underline the main idea and circle two supporting details.",
      advanced:
        "Provide a paragraph without identifying the main idea. Ask students to identify the main idea and three supporting details.",
    },
    mainActivity: {
      basic: {
        title: "Main Idea Web",
        steps: [
          "Students read a simplified version of the text with visual supports.",
          "Using a structured graphic organizer, they identify the main idea (already written in center bubble).",
          "Students find and record 2-3 supporting details in outer bubbles.",
          "Teacher provides guided support as needed.",
        ],
        materials: "Simplified text, pre-filled graphic organizers, highlighters",
      },
      intermediate: {
        title: "Main Idea Organization",
        steps: [
          "Students read grade-level text with some vocabulary support.",
          "Using a graphic organizer, they identify and write the main idea in the center.",
          "Students find and record 3-4 supporting details.",
          "They work in pairs to review each other's work.",
        ],
        materials: "Grade-level text, blank graphic organizers, vocabulary cards",
      },
      advanced: {
        title: "Detail Analysis",
        steps: [
          "Students read grade-level or above text independently.",
          "Using a complex graphic organizer, they identify the main idea and 4-5 supporting details.",
          "For each detail, they explain how it contributes to the main idea.",
          "They rank the details in order of importance and justify their ranking.",
        ],
        materials: "Advanced text, analytical graphic organizers",
      },
    },
    assessment: {
      basic:
        "Exit ticket with multiple choice options: Students select the main idea from 3 choices and identify one supporting detail from the text.",
      intermediate:
        "Exit ticket with short answer: Students write the main idea in their own words and list two supporting details from the text.",
      advanced:
        "Exit ticket with analysis: Students write the main idea, list supporting details, and explain how one detail significantly contributes to the main idea.",
    },
    closure: [
      "Facilitate a brief whole-class discussion about what they learned.",
      "Have students share one supporting detail they found and how it helped them understand the main idea.",
      "Review the importance of identifying main ideas and supporting details when reading.",
      "Preview the next day's lesson on using main ideas to summarize texts.",
    ],
    iepConnections: [
      {
        student: "Jamie Rogers",
        goal: "Reading Comprehension Goal",
        connection:
          "This lesson addresses Jamie's IEP goal of identifying main idea and supporting details. The scaffolded approach and visual supports in the basic level activities provide the appropriate level of support for Jamie to make progress toward the 80% accuracy target.",
      },
      {
        student: "Casey Martinez",
        goal: "Reading Comprehension Goal",
        connection:
          "The graphic organizers and structured approach support Casey's goal of identifying supporting details with 75% accuracy. The visual format helps organize information in a way that builds on Casey's current skill level.",
      },
    ],
  }

  return (
    <div className="space-y-6">
      <p className="text-sm text-gray-600 mb-4">
        Review your lesson plan before generating the final version. You can toggle between different student levels to
        see differentiated content.
      </p>

      <div className="border-b border-gray-200 bg-gray-50 p-3 flex space-x-2 rounded-t-lg">
        <Button
          variant={activeTab === "all" ? "default" : "outline"}
          size="sm"
          onClick={() => setActiveTab("all")}
          className={activeTab === "all" ? "bg-teal-600 hover:bg-teal-700" : ""}
        >
          All Levels
        </Button>
        <Button
          variant={activeTab === "basic" ? "default" : "outline"}
          size="sm"
          onClick={() => setActiveTab("basic")}
          className={
            activeTab === "basic"
              ? "bg-blue-600 hover:bg-blue-700"
              : "text-blue-700 hover:bg-blue-50 hover:border-blue-200"
          }
        >
          Basic
        </Button>
        <Button
          variant={activeTab === "intermediate" ? "default" : "outline"}
          size="sm"
          onClick={() => setActiveTab("intermediate")}
          className={
            activeTab === "intermediate"
              ? "bg-green-600 hover:bg-green-700"
              : "text-green-700 hover:bg-green-50 hover:border-green-200"
          }
        >
          Intermediate
        </Button>
        <Button
          variant={activeTab === "advanced" ? "default" : "outline"}
          size="sm"
          onClick={() => setActiveTab("advanced")}
          className={
            activeTab === "advanced"
              ? "bg-purple-600 hover:bg-purple-700"
              : "text-purple-700 hover:bg-purple-50 hover:border-purple-200"
          }
        >
          Advanced
        </Button>
      </div>

      <div className="p-6 border border-gray-200 rounded-b-lg bg-white">
        <div className="mb-8">
          <div className="flex items-center">
            <Book size={18} className="text-teal-600 mr-2" />
            <h2 className="text-xl font-semibold">{lessonPlan.title}</h2>
          </div>
          <div className="flex flex-wrap gap-2 mt-2">
            <span className="px-2 py-0.5 bg-gray-100 text-gray-600 text-xs rounded">{lessonPlan.grade} Grade</span>
            <span className="px-2 py-0.5 bg-gray-100 text-gray-600 text-xs rounded">{lessonPlan.subject}</span>
            <span className="px-2 py-0.5 bg-gray-100 text-gray-600 text-xs rounded">{lessonPlan.standards}</span>
            <span className="px-2 py-0.5 bg-gray-100 text-gray-600 text-xs rounded">{lessonPlan.duration} minutes</span>
          </div>
        </div>

        {/* Learning Objectives */}
        <div className="mb-6 border-b border-gray-100 pb-6">
          <div className="flex justify-between items-center cursor-pointer" onClick={() => toggleSection("objectives")}>
            <h3 className="text-lg font-semibold mb-3 flex items-center">
              <Target size={16} className="text-teal-600 mr-2" />
              Learning Objectives
            </h3>
            <button className="p-1 text-gray-500 hover:text-gray-700">
              {expanded.objectives ? <ChevronUp size={18} /> : <ChevronDown size={18} />}
            </button>
          </div>

          {expanded.objectives && (
            <div className="pl-6 mb-4 space-y-2">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="p-2 bg-blue-50 border border-blue-100 rounded-md">
                  <p className="text-xs font-medium text-blue-800 mb-1">Basic Level</p>
                  <p className="text-sm">{lessonPlan.objectives.basic}</p>
                </div>
                <div className="p-2 bg-green-50 border border-green-100 rounded-md">
                  <p className="text-xs font-medium text-green-800 mb-1">Intermediate Level</p>
                  <p className="text-sm">{lessonPlan.objectives.intermediate}</p>
                </div>
                <div className="p-2 bg-purple-50 border border-purple-100 rounded-md">
                  <p className="text-xs font-medium text-purple-800 mb-1">Advanced Level</p>
                  <p className="text-sm">{lessonPlan.objectives.advanced}</p>
                </div>
              </div>
            </div>
          )}
        </div>

        {/* Warm-up */}
        {data.components.warmup && (
          <div className="mb-6 border-b border-gray-100 pb-6">
            <div className="flex justify-between items-center cursor-pointer" onClick={() => toggleSection("warmup")}>
              <h3 className="text-lg font-semibold mb-3 flex items-center">
                <Layers size={16} className="text-teal-600 mr-2" />
                Warm-up / Introduction (10 minutes)
              </h3>
              <button className="p-1 text-gray-500 hover:text-gray-700">
                {expanded.warmup ? <ChevronUp size={18} /> : <ChevronDown size={18} />}
              </button>
            </div>

            {expanded.warmup && (
              <div className="pl-6 mb-4">
                <h4 className="text-md font-medium mb-2">All Students:</h4>
                <ol className="list-decimal list-inside space-y-2 mb-4">
                  {lessonPlan.warmup.all.map((item, index) => (
                    <li key={index} className="text-sm text-gray-700">
                      {item}
                    </li>
                  ))}
                </ol>

                {(activeTab === "all" || activeTab === "basic") && (
                  <div
                    className={`p-3 bg-blue-50 border border-blue-100 rounded-md ${activeTab !== "all" ? "" : "mb-4"}`}
                  >
                    <p className="text-xs font-medium text-blue-800 mb-1">Basic Level</p>
                    <p className="text-sm text-gray-700">{lessonPlan.warmup.basic}</p>
                  </div>
                )}

                {(activeTab === "all" || activeTab === "intermediate") && (
                  <div
                    className={`p-3 bg-green-50 border border-green-100 rounded-md ${activeTab !== "all" ? "" : "mb-4 mt-4"}`}
                  >
                    <p className="text-xs font-medium text-green-800 mb-1">Intermediate Level</p>
                    <p className="text-sm text-gray-700">{lessonPlan.warmup.intermediate}</p>
                  </div>
                )}

                {(activeTab === "all" || activeTab === "advanced") && (
                  <div
                    className={`p-3 bg-purple-50 border border-purple-100 rounded-md ${activeTab !== "all" ? "" : "mt-4"}`}
                  >
                    <p className="text-xs font-medium text-purple-800 mb-1">Advanced Level</p>
                    <p className="text-sm text-gray-700">{lessonPlan.warmup.advanced}</p>
                  </div>
                )}
              </div>
            )}
          </div>
        )}

        {/* Main Activity */}
        {data.components.mainActivity && (
          <div className="mb-6 border-b border-gray-100 pb-6">
            <div
              className="flex justify-between items-center cursor-pointer"
              onClick={() => toggleSection("mainActivity")}
            >
              <h3 className="text-lg font-semibold mb-3 flex items-center">
                <Layers size={16} className="text-teal-600 mr-2" />
                Main Learning Activities (25 minutes)
              </h3>
              <button className="p-1 text-gray-500 hover:text-gray-700">
                {expanded.mainActivity ? <ChevronUp size={18} /> : <ChevronDown size={18} />}
              </button>
            </div>

            {expanded.mainActivity && (
              <div className="pl-6 mb-4">
                {(activeTab === "all" || activeTab === "basic") && (
                  <div
                    className={`p-3 bg-blue-50 border border-blue-100 rounded-md ${activeTab !== "all" ? "" : "mb-4"}`}
                  >
                    <p className="text-xs font-medium text-blue-800 mb-1">Basic Level</p>
                    <h5 className="text-sm font-medium mb-2">{lessonPlan.mainActivity.basic.title}</h5>
                    <ol className="list-decimal list-inside space-y-2 text-sm text-gray-700">
                      {lessonPlan.mainActivity.basic.steps.map((step, index) => (
                        <li key={index}>{step}</li>
                      ))}
                    </ol>
                    <p className="text-xs text-blue-800 mt-2 italic">
                      Materials: {lessonPlan.mainActivity.basic.materials}
                    </p>
                  </div>
                )}

                {(activeTab === "all" || activeTab === "intermediate") && (
                  <div
                    className={`p-3 bg-green-50 border border-green-100 rounded-md ${activeTab !== "all" ? "" : "mb-4 mt-4"}`}
                  >
                    <p className="text-xs font-medium text-green-800 mb-1">Intermediate Level</p>
                    <h5 className="text-sm font-medium mb-2">{lessonPlan.mainActivity.intermediate.title}</h5>
                    <ol className="list-decimal list-inside space-y-2 text-sm text-gray-700">
                      {lessonPlan.mainActivity.intermediate.steps.map((step, index) => (
                        <li key={index}>{step}</li>
                      ))}
                    </ol>
                    <p className="text-xs text-green-800 mt-2 italic">
                      Materials: {lessonPlan.mainActivity.intermediate.materials}
                    </p>
                  </div>
                )}

                {(activeTab === "all" || activeTab === "advanced") && (
                  <div
                    className={`p-3 bg-purple-50 border border-purple-100 rounded-md ${activeTab !== "all" ? "" : "mt-4"}`}
                  >
                    <p className="text-xs font-medium text-purple-800 mb-1">Advanced Level</p>
                    <h5 className="text-sm font-medium mb-2">{lessonPlan.mainActivity.advanced.title}</h5>
                    <ol className="list-decimal list-inside space-y-2 text-sm text-gray-700">
                      {lessonPlan.mainActivity.advanced.steps.map((step, index) => (
                        <li key={index}>{step}</li>
                      ))}
                    </ol>
                    <p className="text-xs text-purple-800 mt-2 italic">
                      Materials: {lessonPlan.mainActivity.advanced.materials}
                    </p>
                  </div>
                )}
              </div>
            )}
          </div>
        )}

        {/* Assessment */}
        {data.components.assessment && (
          <div className="mb-6 border-b border-gray-100 pb-6">
            <div
              className="flex justify-between items-center cursor-pointer"
              onClick={() => toggleSection("assessment")}
            >
              <h3 className="text-lg font-semibold mb-3 flex items-center">
                <Target size={16} className="text-teal-600 mr-2" />
                Assessment (5 minutes)
              </h3>
              <button className="p-1 text-gray-500 hover:text-gray-700">
                {expanded.assessment ? <ChevronUp size={18} /> : <ChevronDown size={18} />}
              </button>
            </div>

            {expanded.assessment && (
              <div className="pl-6 mb-4">
                {(activeTab === "all" || activeTab === "basic") && (
                  <div
                    className={`p-3 bg-blue-50 border border-blue-100 rounded-md ${activeTab !== "all" ? "" : "mb-4"}`}
                  >
                    <p className="text-xs font-medium text-blue-800 mb-1">Basic Level</p>
                    <p className="text-sm text-gray-700">{lessonPlan.assessment.basic}</p>
                  </div>
                )}

                {(activeTab === "all" || activeTab === "intermediate") && (
                  <div
                    className={`p-3 bg-green-50 border border-green-100 rounded-md ${activeTab !== "all" ? "" : "mb-4 mt-4"}`}
                  >
                    <p className="text-xs font-medium text-green-800 mb-1">Intermediate Level</p>
                    <p className="text-sm text-gray-700">{lessonPlan.assessment.intermediate}</p>
                  </div>
                )}

                {(activeTab === "all" || activeTab === "advanced") && (
                  <div
                    className={`p-3 bg-purple-50 border border-purple-100 rounded-md ${activeTab !== "all" ? "" : "mt-4"}`}
                  >
                    <p className="text-xs font-medium text-purple-800 mb-1">Advanced Level</p>
                    <p className="text-sm text-gray-700">{lessonPlan.assessment.advanced}</p>
                  </div>
                )}
              </div>
            )}
          </div>
        )}

        {/* Closure */}
        {data.components.closure && (
          <div className="mb-6 border-b border-gray-100 pb-6">
            <div className="flex justify-between items-center cursor-pointer" onClick={() => toggleSection("closure")}>
              <h3 className="text-lg font-semibold mb-3 flex items-center">
                <FileText size={16} className="text-teal-600 mr-2" />
                Closure (5 minutes)
              </h3>
              <button className="p-1 text-gray-500 hover:text-gray-700">
                {expanded.closure ? <ChevronUp size={18} /> : <ChevronDown size={18} />}
              </button>
            </div>

            {expanded.closure && (
              <div className="pl-6 mb-4">
                <h4 className="text-md font-medium mb-2">All Students:</h4>
                <ol className="list-decimal list-inside space-y-2 mb-4 text-sm text-gray-700">
                  {lessonPlan.closure.map((item, index) => (
                    <li key={index}>{item}</li>
                  ))}
                </ol>
              </div>
            )}
          </div>
        )}

        {/* IEP Connections */}
        {data.generationOptions.includeIepGoals && (
          <div className="mb-6">
            <div
              className="flex justify-between items-center cursor-pointer"
              onClick={() => toggleSection("iepConnections")}
            >
              <h3 className="text-lg font-semibold mb-3 flex items-center">
                <Users size={16} className="text-teal-600 mr-2" />
                IEP Connections
              </h3>
              <button className="p-1 text-gray-500 hover:text-gray-700">
                {expanded.iepConnections ? <ChevronUp size={18} /> : <ChevronDown size={18} />}
              </button>
            </div>

            {expanded.iepConnections && (
              <div className="space-y-3">
                {lessonPlan.iepConnections.map((connection, index) => (
                  <div key={index} className="p-3 bg-blue-50 border border-blue-100 rounded-md">
                    <p className="text-xs font-medium text-blue-800 mb-1">
                      {connection.student} - {connection.goal}
                    </p>
                    <p className="text-sm text-gray-700">{connection.connection}</p>
                  </div>
                ))}
              </div>
            )}
          </div>
        )}
      </div>

      <div className="p-4 border border-gray-200 bg-gray-50 rounded-lg flex justify-between items-center">
        <div className="flex items-center">
          <div className="w-2 h-2 bg-teal-500 rounded-full mr-2"></div>
          <span className="text-xs text-gray-500">AI-generated preview - Generate final version to save</span>
        </div>
        <div className="flex space-x-3">
          <Button variant="outline" size="sm" className="flex items-center">
            <RefreshCw size={14} className="mr-1.5" />
            Regenerate
          </Button>
          <Button variant="outline" size="sm" className="flex items-center">
            <Edit3 size={14} className="mr-1.5" />
            Edit
          </Button>
          <Button variant="outline" size="sm" className="flex items-center">
            <Copy size={14} className="mr-1.5" />
            Copy
          </Button>
        </div>
      </div>
    </div>
  )
}
